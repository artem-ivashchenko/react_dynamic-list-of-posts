{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","chosenPost","onPostChange","className","map","post","id","title","type","classNames","onClick","handlePostChange","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","onCommentAdd","setHasError","useState","name","setName","email","setEmail","setBody","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","isLoading","setIsLoading","onSubmit","event","preventDefault","trim","comment","catch","finally","onReset","htmlFor","placeholder","value","onChange","target","PostDetails","comments","setComments","hasError","isNewComment","setIsNewComment","Date","updateAt","setUpdateAt","useEffect","handleCommentDelete","delComment","commId","prev","filter","comm","style","display","marginBottom","length","href","addComment","UserSelector","chosenUser","onChangeUser","users","setUsers","isOpened","setIsOpened","role","user","handleUserChange","App","setChosenUser","setChosenPost","setPosts","firstRender","useRef","userId","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d49eefc3.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  chosenPost: Post | null\n  onPostChange: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, chosenPost, onPostChange,\n}) => {\n  const handlePostChange = (post: Post) => {\n    if (post.id === chosenPost?.id) {\n      onPostChange(null);\n    } else {\n      onPostChange(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link ', {\n                    'is-light': chosenPost?.id !== post.id,\n                  })}\n                  onClick={() => handlePostChange(post)}\n                >\n                  {chosenPost?.id !== post.id\n                    ? 'Open'\n                    : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { addCommentPost } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  onCommentAdd: (comment: Comment) => void,\n  setHasError: (bool: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId, onCommentAdd, setHasError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameError(false);\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailError(false);\n    setEmail(event.target.value);\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBodyError(false);\n    setBody(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      setNameError(true);\n    }\n\n    if (!email.trim()) {\n      setEmailError(true);\n    }\n\n    if (!body.trim()) {\n      setBodyError(true);\n    }\n\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      return;\n    }\n\n    setIsLoading(true);\n    addCommentPost({\n      postId,\n      name,\n      email,\n      body,\n    })\n      .then((comment: Comment) => {\n        setBody('');\n        onCommentAdd(comment);\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': nameError,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': emailError,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': bodyError,\n            })}\n            value={body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getCommentsPost = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addCommentPost = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commId: number) => {\n  return client.delete(`/comments/${commId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nimport { getCommentsPost, deleteComment } from '../api/comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isNewComment, setIsNewComment] = useState(false);\n  const [updateAt, setUpdateAt] = useState(new Date());\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsNewComment(false);\n    setHasError(false);\n\n    getCommentsPost(post.id)\n      .then(setComments)\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, [post, updateAt]);\n\n  const handleCommentAdd = (addComment: Comment) => {\n    setComments((prev) => [...prev, addComment]);\n  };\n\n  const handleCommentDelete = (delComment: Comment) => {\n    setComments((prev) => prev.filter((comm) => delComment.id !== comm.id));\n\n    deleteComment(delComment.id).catch(() => {\n      setComments(comments);\n    });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${post.id}: ${post.title}`}</h2>\n\n          <p data-cy=\"PostBody\">{post.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {hasError ? (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  <span style={{ display: 'block', marginBottom: '12px' }}>\n                    Something went wrong!\n                  </span>\n\n                  <div className=\"control\">\n                    <button\n                      type=\"button\"\n                      className={classNames('button is-link is-light', {\n                        'is-loading': isLoading,\n                      })}\n                      onClick={() => setUpdateAt(new Date())}\n                    >\n                      Retry Loading...\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  {!comments.length && (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  )}\n\n                  {!!comments.length && (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n\n                      {comments.map((comment) => (\n                        <article\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                          key={comment.id}\n                        >\n                          <div className=\"message-header\">\n                            <a\n                              href={`mailto:${comment.email}`}\n                              data-cy=\"CommentAuthor\"\n                            >\n                              {comment.name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => handleCommentDelete(comment)}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {comment.body}\n                          </div>\n                        </article>\n                      ))}\n                    </>\n                  )}\n\n                  {isNewComment ? (\n                    <NewCommentForm\n                      postId={post.id}\n                      onCommentAdd={handleCommentAdd}\n                      setHasError={setHasError}\n                    />\n                  ) : (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={() => setIsNewComment(true)}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\ntype Props = {\n  chosenUser: User | null,\n  onChangeUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({ chosenUser, onChangeUser }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isOpened, setIsOpened] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const handleUserChange = (user: User) => {\n    onChangeUser(user);\n    setIsOpened(false);\n  };\n\n  const handleIsOpenedChange = () => {\n    setIsOpened(prev => !prev);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isOpened,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleIsOpenedChange}\n        >\n          <span>\n            {chosenUser ? chosenUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleUserChange(user)}\n              key={user.id}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [chosenUser, setChosenUser] = useState<User | null>(null);\n  const [chosenPost, setChosenPost] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [updateAt, setUpdateAt] = useState(new Date());\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n\n      return;\n    }\n\n    if (chosenUser) {\n      setIsLoading(true);\n      setHasError(false);\n      setChosenPost(null);\n\n      getUserPosts(chosenUser.id)\n        .then(setPosts)\n        .catch(() => setHasError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [chosenUser, updateAt]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  chosenUser={chosenUser}\n                  onChangeUser={setChosenUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!chosenUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {isLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {hasError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        <span\n                          style={{ display: 'block', marginBottom: '12px' }}\n                        >\n                          Something went wrong!\n                        </span>\n                        <div className=\"control\">\n                          <button\n                            type=\"button\"\n                            className={classNames('button is-link is-light', {\n                              'is-loading': isLoading,\n                            })}\n                            onClick={() => setUpdateAt(new Date())}\n                          >\n                            Retry Loading...\n                          </button>\n                        </div>\n                      </div>\n                    )}\n\n                    {chosenUser && (\n                      <>\n                        {!posts.length && !hasError && (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        )}\n\n                        {!!posts.length && !hasError && (\n                          <PostsList\n                            posts={posts}\n                            chosenPost={chosenPost}\n                            onPostChange={setChosenPost}\n                          />\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': chosenPost && !hasError },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {chosenPost && <PostDetails post={chosenPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}